{% comment %}
  Renders product buy-buttons.
  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} product form id.
  - section_id: {String} id of section to which this snippet belongs.
  - show_pickup_availability: {Boolean} for the pickup availability. If true the pickup availability is rendered, false - not rendered (optional).

  Usage:
  {% render 'buy-buttons', block: block, product: product, product_form_id: product_form_id, section_id: section.id, show_pickup_availability: true %}
{% endcomment %}
<div {{ block.shopify_attributes }}>
  {%- if product != blank -%}
    {%- liquid
      assign gift_card_recipient_feature_active = false
      if block.settings.show_gift_card_recipient and product.gift_card?
        assign gift_card_recipient_feature_active = true
      endif

      assign show_dynamic_checkout = false
      if block.settings.show_dynamic_checkout and gift_card_recipient_feature_active == false
        assign show_dynamic_checkout = true
      endif
    -%}

    <product-form
      class="product-form"
      data-hide-errors="{{ gift_card_recipient_feature_active }}"
      data-section-id="{{ section.id }}"
    >
      <div class="product-form__error-message-wrapper" role="alert" hidden>
        <span class="svg-wrapper">
          {{- 'icon-error.svg' | inline_asset_content -}}
        </span>
        <span class="product-form__error-message"></span>
      </div>

      {%- form 'product',
        product,
        id: product_form_id,
        class: 'form',
        novalidate: 'novalidate',
        data-type: 'add-to-cart-form'
      -%}
        <input
          type="hidden"
          name="id"
          value="{{ product.selected_or_first_available_variant.id }}"
          {% if product.selected_or_first_available_variant.available == false
            or quantity_rule_soldout
            or product.selected_or_first_available_variant == null
          %}
            disabled
          {% endif %}
          class="product-variant-id"
        >

        {%- if gift_card_recipient_feature_active -%}
          {%- render 'gift-card-recipient-form', product: product, form: form, section: section -%}
        {%- endif -%}

        <div class="product-form__buttons">
          {%- liquid
            assign check_against_inventory = true
            if product.selected_or_first_available_variant.inventory_management != 'shopify' or product.selected_or_first_available_variant.inventory_policy == 'continue'
              assign check_against_inventory = false
            endif
            if product.selected_or_first_available_variant.quantity_rule.min > product.selected_or_first_available_variant.inventory_quantity and check_against_inventory
              assign quantity_rule_soldout = true
            endif
          -%}
          <style>
            .custom-buttons-container {
              display: flex;
              flex-direction: column;
              gap: 10px;
              margin-bottom: 10px;
            }
            @media screen and (min-width: 750px) {
              .custom-buttons-container {
                flex-direction: row;
              }
              .custom-buttons-container .button {
                flex-grow: 1;
              }
            }
          </style>
          <div class="custom-buttons-container">
            <button
              id="ProductSubmitButton-{{ section_id }}"
              type="submit"
              name="add"
              class="product-form__submit button button--full-width button--secondary"
              {% if product.selected_or_first_available_variant.available == false
                or quantity_rule_soldout
                or product.selected_or_first_available_variant == null
              %}
                disabled
              {% endif %}
            >
              <span>
                {%- if product.selected_or_first_available_variant == null -%}
                  {{ 'products.product.unavailable' | t }}
                {%- elsif product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
                  {{ 'products.product.sold_out' | t }}
                {%- else -%}
                  Comprar sin impresión
                {%- endif -%}
              </span>
              {%- render 'loading-spinner' -%}
            </button>
            <button
              id="ProductQuoteButton-{{ section_id }}"
              type="button"
              name="add-to-quote"
              class="button button--full-width button--primary"
              data-product-id="{{ product.selected_or_first_available_variant.id }}"
              {% if product.selected_or_first_available_variant == null %}
                disabled
              {% endif %}
            >
              <span>
                Solicitar Cotización
              </span>
              <div class="loading-overlay__spinner" hidden>
                <svg
                  aria-hidden="true"
                  focusable="false"
                  class="spinner"
                  viewBox="0 0 66 66"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                </svg>
              </div>
            </button>
          </div>
          {%- if show_dynamic_checkout -%}
            {{ form | payment_button }}
          {%- endif -%}
        </div>
      {%- endform -%}
    </product-form>
  {%- else -%}
    <div class="product-form">
      <div class="product-form__buttons form">
        <button
          type="submit"
          name="add"
          class="product-form__submit button button--full-width button--primary"
          disabled
        >
          {{ 'products.product.sold_out' | t }}
        </button>
      </div>
    </div>
  {%- endif -%}

  {%- if show_pickup_availability -%}
    {{ 'component-pickup-availability.css' | asset_url | stylesheet_tag }}

    {%- assign pick_up_availabilities = product.selected_or_first_available_variant.store_availabilities
      | where: 'pick_up_enabled', true
    -%}

    <pickup-availability
      class="product__pickup-availabilities quick-add-hidden"
      {% if product.selected_or_first_available_variant.available and pick_up_availabilities.size > 0 %}
        available
      {% endif %}
      data-root-url="{{ routes.root_url }}"
      data-variant-id="{{ product.selected_or_first_available_variant.id }}"
      data-has-only-default-variant="{{ product.has_only_default_variant }}"
      data-product-page-color-scheme="gradient color-{{ section.settings.color_scheme }}"
    >
      <template>
        <pickup-availability-preview class="pickup-availability-preview">
          <span class="svg-wrapper">
            {{- 'icon-unavailable.svg' | inline_asset_content -}}
          </span>
          <div class="pickup-availability-info">
            <p class="caption-large">{{ 'products.product.pickup_availability.unavailable' | t }}</p>
            <button class="pickup-availability-button link link--text underlined-link">
              {{ 'products.product.pickup_availability.refresh' | t }}
            </button>
          </div>
        </pickup-availability-preview>
      </template>
    </pickup-availability>

    <script src="{{ 'pickup-availability.js' | asset_url }}" defer="defer"></script>
  {%- endif -%}
</div>

<script>
  // Self-executing anonymous function to encapsulate the quote logic
  (function() {
    // Only run on product pages by checking for the quote button
    const quoteButton = document.getElementById('ProductQuoteButton-{{ section_id }}');
    if (!quoteButton) {
      return;
    }

    const quoteCart = {
      getCart: function() {
        try {
          const cart = localStorage.getItem('customQuoteCart');
          return cart ? JSON.parse(cart) : [];
        } catch (e) {
          console.error("Error getting quote cart from localStorage", e);
          return [];
        }
      },
      saveCart: function(cart) {
        try {
          localStorage.setItem('customQuoteCart', JSON.stringify(cart));
        } catch (e) {
          console.error("Error saving quote cart to localStorage", e);
        }
      },
      updateIconCount: function() {
        const cart = this.getCart();
        const countElement = document.getElementById('QuoteIcon-Badge-Count');
        const iconBubble = document.getElementById('QuoteIcon-Bubble');

        if (countElement && iconBubble) {
          const count = cart.length;
          countElement.textContent = count;
          iconBubble.classList.toggle('hidden', count === 0);
        }
      },
      addToCart: function(variantId, quantity, productData) {
        const cart = this.getCart();
        const existingItem = cart.find(item => item.id === variantId);

        if (existingItem) {
          existingItem.quantity += quantity;
        } else {
          const variant = productData.variants.find(v => v.id === parseInt(variantId, 10));
          if (!variant) {
            console.error('[QuoteCart] ERROR: Variant not found in product data for ID:', variantId);
            return;
          }

          let imageUrl = productData.featured_image || null;
          if (variant.featured_image) {
            imageUrl = variant.featured_image.src;
          }

          cart.push({
            id: variantId,
            quantity: quantity,
            product_id: productData.id,
            title: productData.title,
            price: variant.price,
            image: imageUrl,
            options_with_values: variant.options_with_values,
            handle: productData.handle
          });
        }
        this.saveCart(cart);
        this.updateIconCount();
      }
    };

    function handleQuoteButtonClick(event) {
      event.preventDefault();

      const productFormElement = quoteButton.closest('product-form');
      const sectionId = productFormElement.dataset.sectionId;
      const productJsonScript = document.getElementById(`ProductJson-${sectionId}`);

      try {
        const productData = JSON.parse(productJsonScript.textContent);
        const variantId = quoteButton.dataset.productId;
        const quantityInput = productFormElement.querySelector('[name="quantity"]');
        const quantity = quantityInput ? parseInt(quantityInput.value, 10) : 1;

        quoteCart.addToCart(variantId, quantity, productData);

        // UI Feedback
        const buttonTextSpan = quoteButton.querySelector('span');
        const originalText = buttonTextSpan.textContent;
        quoteButton.disabled = true;
        buttonTextSpan.textContent = '¡Añadido!';
        setTimeout(() => {
          buttonTextSpan.textContent = originalText;
          quoteButton.disabled = false;
        }, 2000);

      } catch (e) {
        console.error("[QuoteCart] Error processing product data or adding to cart:", e);
      }
    }

    // Attach listener directly to the button
    quoteButton.addEventListener('click', handleQuoteButtonClick);

    // Also, ensure the icon count is correct on page load
    // We need to wait for the DOM to be fully ready for this part.
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', quoteCart.updateIconCount);
    } else {
        quoteCart.updateIconCount();
    }
  })();
</script>
