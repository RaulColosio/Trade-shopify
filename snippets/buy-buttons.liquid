{% comment %}
  Renders product buy-buttons.
  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} product form id.
  - section_id: {String} id of section to which this snippet belongs.
  - show_pickup_availability: {Boolean} for the pickup availability. If true the pickup availability is rendered, false - not rendered (optional).

  Usage:
  {% render 'buy-buttons', block: block, product: product, product_form_id: product_form_id, section_id: section.id, show_pickup_availability: true %}
{% endcomment %}
<div {{ block.shopify_attributes }}>
  {%- if product != blank -%}
    {%- liquid
      assign gift_card_recipient_feature_active = false
      if block.settings.show_gift_card_recipient and product.gift_card?
        assign gift_card_recipient_feature_active = true
      endif

      assign show_dynamic_checkout = false
      if block.settings.show_dynamic_checkout and gift_card_recipient_feature_active == false
        assign show_dynamic_checkout = true
      endif
    -%}

    <product-form
      class="product-form"
      data-hide-errors="{{ gift_card_recipient_feature_active }}"
      data-section-id="{{ section.id }}"
    >
      <div class="product-form__error-message-wrapper" role="alert" hidden>
        <span class="svg-wrapper">
          {{- 'icon-error.svg' | inline_asset_content -}}
        </span>
        <span class="product-form__error-message"></span>
      </div>

      {%- form 'product',
        product,
        id: product_form_id,
        class: 'form',
        novalidate: 'novalidate',
        data-type: 'add-to-cart-form'
      -%}
        <input
          type="hidden"
          name="id"
          value="{{ product.selected_or_first_available_variant.id }}"
          {% if product.selected_or_first_available_variant.available == false
            or quantity_rule_soldout
            or product.selected_or_first_available_variant == null
          %}
            disabled
          {% endif %}
          class="product-variant-id"
        >

        {%- if gift_card_recipient_feature_active -%}
          {%- render 'gift-card-recipient-form', product: product, form: form, section: section -%}
        {%- endif -%}

        <div class="product-form__buttons">
          {%- liquid
            assign check_against_inventory = true
            if product.selected_or_first_available_variant.inventory_management != 'shopify' or product.selected_or_first_available_variant.inventory_policy == 'continue'
              assign check_against_inventory = false
            endif
            if product.selected_or_first_available_variant.quantity_rule.min > product.selected_or_first_available_variant.inventory_quantity and check_against_inventory
              assign quantity_rule_soldout = true
            endif
          -%}
          <style>
            .custom-buttons-container {
              display: flex;
              flex-direction: column;
              gap: 10px;
              margin-bottom: 10px;
            }
            @media screen and (min-width: 750px) {
              .custom-buttons-container {
                flex-direction: row;
              }
              .custom-buttons-container .button {
                flex-grow: 1;
              }
            }
          </style>
          <div class="custom-buttons-container">
            <button
              id="ProductSubmitButton-{{ section_id }}"
              type="submit"
              name="add"
              class="product-form__submit button button--full-width button--secondary"
              {% if product.selected_or_first_available_variant.available == false
                or quantity_rule_soldout
                or product.selected_or_first_available_variant == null
              %}
                disabled
              {% endif %}
            >
              <span>
                {%- if product.selected_or_first_available_variant == null -%}
                  {{ 'products.product.unavailable' | t }}
                {%- elsif product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
                  {{ 'products.product.sold_out' | t }}
                {%- else -%}
                  Comprar sin impresión
                {%- endif -%}
              </span>
              {%- render 'loading-spinner' -%}
            </button>
            <button
              id="ProductQuoteButton-{{ section_id }}"
              type="button"
              name="add-to-quote"
              class="button button--full-width button--primary"
              {% if product.selected_or_first_available_variant == null %}
                disabled
              {% endif %}
            >
              <span>
                Solicitar cotización con impresión
              </span>
            </button>
          </div>
          {%- if show_dynamic_checkout -%}
            {{ form | payment_button }}
          {%- endif -%}
        </div>
      {%- endform -%}
    </product-form>
  {%- else -%}
    <div class="product-form">
      <div class="product-form__buttons form">
        <button
          type="submit"
          name="add"
          class="product-form__submit button button--full-width button--primary"
          disabled
        >
          {{ 'products.product.sold_out' | t }}
        </button>
      </div>
    </div>
  {%- endif -%}

  {%- if show_pickup_availability -%}
    {{ 'component-pickup-availability.css' | asset_url | stylesheet_tag }}
    <pickup-availability
      class="product__pickup-availabilities quick-add-hidden"
      {% if product.selected_or_first_available_variant.available and pick_up_availabilities.size > 0 %}
        available
      {% endif %}
      data-root-url="{{ routes.root_url }}"
      data-variant-id="{{ product.selected_or_first_available_variant.id }}"
      data-has-only-default-variant="{{ product.has_only_default_variant }}"
    >
      <template>
        <pickup-availability-preview class="pickup-availability-preview">
          <span class="svg-wrapper">
            {{- 'icon-unavailable.svg' | inline_asset_content -}}
          </span>
          <div class="pickup-availability-info">
            <p class="caption-large">{{ 'products.product.pickup_availability.unavailable' | t }}</p>
            <button class="pickup-availability-button link link--text underlined-link">
              {{ 'products.product.pickup_availability.refresh' | t }}
            </button>
          </div>
        </pickup-availability-preview>
      </template>
    </pickup-availability>
    <script src="{{ 'pickup-availability.js' | asset_url }}" defer="defer"></script>
  {%- endif -%}
</div>

<script>
  (function() {
    const quoteButton = document.getElementById('ProductQuoteButton-{{ section_id }}');
    const confirmationModal = document.getElementById('AddedToQuoteModal');
    const continueExploringButton = document.getElementById('ContinueExploringButton');

    if (!quoteButton || !confirmationModal || !continueExploringButton) {
        // If the elements don't exist on this page, do nothing.
        return;
    }

    const getCart = () => JSON.parse(localStorage.getItem('customQuoteCart') || '[]');
    const saveCart = (cart) => {
      localStorage.setItem('customQuoteCart', JSON.stringify(cart));
      document.dispatchEvent(new CustomEvent('quote:updated'));
    };

    function addToQuoteStorage(variantId, quantity, productData) {
      const cart = getCart();
      const existingItem = cart.find(item => item.id === variantId);

      if (existingItem) {
        existingItem.quantity = parseInt(existingItem.quantity, 10) + parseInt(quantity, 10);
      } else {
        const variant = productData.variants.find(v => v.id == variantId);
        if (!variant) return;

        let imageUrl = productData.featured_image || null;
        if (variant.featured_image) {
          imageUrl = variant.featured_image.src;
        }

        const optionsWithValues = [];
        if (productData.has_only_default_variant !== true) {
            if (variant.option1) optionsWithValues.push({ name: productData.options[0].name, value: variant.option1 });
            if (variant.option2 && productData.options[1]) optionsWithValues.push({ name: productData.options[1].name, value: variant.option2 });
            if (variant.option3 && productData.options[2]) optionsWithValues.push({ name: productData.options[2].name, value: variant.option3 });
        }

        cart.push({
          id: variantId,
          quantity: parseInt(quantity, 10),
          title: productData.title,
          image: imageUrl,
          options_with_values: optionsWithValues,
          handle: productData.handle
        });
      }
      saveCart(cart);
    }

    quoteButton.addEventListener('click', function(event) {
      event.preventDefault();

      const productFormElement = quoteButton.closest('product-form');
      const form = productFormElement.querySelector('form');
      const variantIdInput = form.querySelector('[name="id"]');
      const quantityInput = form.querySelector('[name="quantity"]');

      const variantId = variantIdInput ? variantIdInput.value : null;
      const quantity = quantityInput ? parseInt(quantityInput.value, 10) : 1;

      if (!variantId) return;

      const sectionId = productFormElement.dataset.sectionId;
      const productJsonScript = document.getElementById(`ProductJson-${sectionId}`);

      try {
        const productData = JSON.parse(productJsonScript.textContent);
        addToQuoteStorage(variantId, quantity, productData);
        confirmationModal.setAttribute('open', '');
      } catch (e) {
        console.error("[BuyButtonsQuote] Error:", e);
      }
    });

    continueExploringButton.addEventListener('click', () => {
      confirmationModal.removeAttribute('open');
    });

  })();
</script>
